import axios from "axios";import store from "@/store";import router from "@/router";const serverUrl = 'http://localhost:8080/'// --------------------- Notice ---------------------------------/** * 메인 페이지에 출력될 공지사항 리스트를 조회합니다. * * @param count 조회할 공지사항 리스트 크기 * @returns 호출 성공 시, return (공지사항, 알림글) * @returns 호출 실패 시, return (errorDTO) */export const getMainNoticeBoardList = (count) => {    return axios        .get(serverUrl + 'api/board/notices/' + count)        .then((response) => {            const boardList = response.data.result.boardList            const alertList = response.data.result.alertList            console.log("response: ", response)            return {                boardList: boardList,                alertList: alertList,            };        }).catch((error) => {            const errorDTO = error.response;            console.log(errorDTO)            // router.push({            //     name: 'ErrorPage',            //     query: errorDTO            // });        })}/** * 공지사항 리스트를 호출합니다 * * @param boardSearchCondition 검색조건 * @returns 호출 성공 시, return (공지사항, 알림글) * @returns 호출 실패 시, return (errorDTO) */export const getNoticeBoardList = (boardSearchCondition) => {    return axios        .get(serverUrl + 'api/board/notices', {            params: boardSearchCondition        })        .then((response) => {            const boardList = response.data.result.boardList            const alertList = response.data.result.alertList            const categoryList = response.data.result.categoryList            const totalListCount = response.data.result.totalListCount            console.log("response: ", response)            return {                boardList: boardList,                alertList: alertList,                categoryList: categoryList,                totalListCount: totalListCount            };        }).catch((error) => {            const errorDTO = error.response;            console.log(errorDTO)            // router.push({            //     name: 'ErrorPage',            //     query: errorDTO            // });        })}/** * 공지사항 상세 정보를 호출합니다 * * @param boardSearchCondition 검색조건 * @returns 호출 성공 시, return (board) * @returns 호출 실패 시, return (errorDTO) */export const getNoticeBoardDetail = (seq) => {    return axios({        method: "get",        url: serverUrl + "api/board/notice/" + seq,    }).then((response) => {        const board = response.data.result.board        console.log("BoardAxios의 board:", board)        return board;    }).catch((error) => {        const errorDTO = error.response;        console.log(errorDTO)        // router.push({        //     name: 'ErrorPage',        //     query: errorDTO        // });    })}// --------------------- Free ---------------------------------/** * 메인 페이지에 출력될 자유게시글 리스트를 조회합니다. * * @param count 조회할 자유게시글 리스트 크기 * @returns 호출 성공 시, return (자유게시글) * @returns 호출 실패 시, return (errorDTO) */export const getMainFreeBoardList = (count) => {    return axios        .get(serverUrl + 'api/board/frees/' + count)        .then((response) => {            const boardList = response.data.result.boardList            console.log("response: ", response)            return {                boardList: boardList,            };        }).catch((error) => {            const errorDTO = error.response;            console.log(errorDTO)            // router.push({            //     name: 'ErrorPage',            //     query: errorDTO            // });        })}/** * 자유 게시글을 등록합니다. * * @param board 등록할 게시글 정보 * @returns seq 등록된 게시글 번호 */export const saveFreeBoard = async (board) => {    const data = new FormData();    console.log('board.accFiles', board.addFiles);    if ((board.addFiles != null) && board.addFiles.length > -1) {        for (let i = 0; i < board.addFiles.length; i++) {            const file = board.addFiles[i]            data.append(`addFiles[${i}]`, file)        }    }    const id = store.getters.id;    data.append('memberId', id)    data.append('subject', board.subject)    data.append('content', board.content)    data.append('categoryId', board.categoryId)    return await axios.post(serverUrl + "api/board/free", data,        {            headers: {                'Content-Type': 'multipart/form-data'            }        })        .then((response) => {            return response;        })        .catch((err) => {            return Promise.reject(err);        })}/** * 자유 게시글 상세 정보를 호출합니다 * * @returns 호출 성공 시, return (board) * @returns 호출 실패 시, return (errorDTO) */export const getFreeBoardDetail = (seq) => {    return axios({        method: "get",        url: serverUrl + "api/board/free/" + seq,    }).then((response) => {        const board = response.data.result.board;        return {            board: board        };    }).catch((error) => {        const errorDTO = error.response.data.result.errorDTO;        console.log('BoardAxios.js의 errorDTO', errorDTO);        // this.$router.push({        //     name: 'ErrorPage',        //     params: {errorMessage: errorDTO.message}        // });    })}/** * 자유게시글 리스트를 호출합니다 * * @param boardSearchCondition 검색조건 * @returns 호출 성공 시, return (자유게시글) * @returns 호출 실패 시, return (errorDTO) */export const getFreeBoardList = (boardSearchCondition) => {    return axios        .get(serverUrl + 'api/board/frees', {            params: boardSearchCondition        })        .then((response) => {            console.log("response: ", response)            const boardList = response.data.result.boardList            const totalListCount = response.data.result.totalListCount            const categoryList = response.data.result.categoryList            return {                boardList: boardList,                totalListCount: totalListCount,                categoryList: categoryList            };        })        // .catch((error) => {        //     const errorDTO = error;        //     console.log("error:", errorDTO)        //        //     router.push({        //         name: 'ErrorPage',        //         query: errorDTO        //     });        // })}/** * 자유 게시글을 수정합니다. * - 기존의 첨부파일을 삭제합니다. (deleteFileNames) * - 새로운 첨부파일을 업로드합니다. (addFiles) * * @param board 수정할 게시글 정보 * @returns {Promise<axios.AxiosResponse<any>>} */export const updateFreeBoard = board => {    const data = new FormData();    console.log(board.addFiles)    // 추가 파일(addFiles) 배열 값 할당    if ((board.addFiles != null) && board.addFiles.length > -1) {        for (let i = 0; i < board.addFiles.length; i++) {            const file = board.addFiles[i]            data.append(`addFiles[${i}]`, file)        }    }    // 삭제 파일(deleteFileNames) 배열 값 할당    if ((board.deleteFileNames != null) && board.deleteFileNames.length > -1) {        for (let i = 0; i < board.deleteFileNames.length; i++) {            const fileName = board.deleteFileNames[i]            data.append(`deleteFileNames[${i}]`, fileName)        }    }    // store 에서 아이디 호출    const id = store.getters.id;    data.append('memberId', id)    data.append('subject', board.subject)    data.append('content', board.content)    data.append('categoryId', board.categoryId)    // 요청 구성 객체    const config = {        headers: {            'Content-Type': 'multipart/form-data'        }    };    return axios        .post(serverUrl + "api/board/free/" + board.seq, data, config)        .catch((err) => {            console.log(err)        })}/** * 자유 게시글을 삭제합니다. * * @param seq 삭제할 게시글 번호 * @returns {Promise<axios.AxiosResponse<any>>} */export const deleteFreeBoard = (seq) => {    return axios        .delete(serverUrl + 'api/board/free/' + seq)        .catch((error) => {                const errorDTO = error.response;                console.log(errorDTO)            }        )}// --------------------- Gallery ---------------------------------/** * 메인 페이지에 출력될 갤러리 게시글 리스트를 조회합니다. * * @param count 조회할 갤러리 게시글 리스트 크기 * @returns 호출 성공 시, return (갤러리 게시글) * @returns 호출 실패 시, return (errorDTO) */export const getMainGalleryBoardList = (count) => {    return axios        .get(serverUrl + 'api/board/galleries/' + count)        .then((response) => {            const galleryList = response.data.result.galleryList            console.log("response: ", response)            return {                galleryList: galleryList            };        }).catch((error) => {            const errorDTO = error.response;            console.log(errorDTO)            // router.push({            //     name: 'ErrorPage',            //     query: errorDTO            // });        })}/** * 갤러리게시글 리스트를 호출합니다 * * @param boardSearchCondition 검색조건 * @returns 호출 성공 시, return (갤러리 게시글) * @returns 호출 실패 시, return (errorDTO) */export const getGalleryBoardList = (boardSearchCondition) => {    return axios        .get(serverUrl + 'api/board/galleries', {            params: boardSearchCondition        })        .then((response) => {            console.log("response: ", response)            const galleryList = response.data.result.galleryList            const totalListCount = response.data.result.totalListCount            const categoryList = response.data.result.categoryList            return {                galleryList: galleryList,                totalListCount: totalListCount,                categoryList: categoryList            };        }).catch((error) => {            const errorDTO = error;            console.log("error:", errorDTO)            // router.push({            //     name: 'ErrorPage',            //     query: errorDTO            // });        })}/** * 갤러리 게시글을 등록합니다. * * @param board 등록할 게시글 정보 * @returns seq 등록된 게시글 번호 */export const saveGalleryBoard = (board) => {    const data = new FormData();    console.log(board.addFiles)    if ((board.addFiles != null) && board.addFiles.length > -1) {        for (let i = 0; i < board.addFiles.length; i++) {            const file = board.addFiles[i]            data.append(`addFiles[${i}]`, file)        }    }    const id = store.getters.id;    data.append('memberId', id)    data.append('subject', board.subject)    data.append('content', board.content)    data.append('categoryId', board.categoryId)    return axios.post(serverUrl + "api/board/gallery", data,        {            headers: {                'Content-Type': 'multipart/form-data'            }        })        .then((response) => {            return response;        })        .catch((err) => {            console.log(err)        })}/** * 갤러리 게시글 상세 정보를 호출합니다 * * @returns 호출 성공 시, return (board) * @returns 호출 실패 시, return (errorDTO) */export const getGalleryBoardDetail = (seq) => {    return axios({        method: "get",        url: serverUrl + "api/board/gallery/" + seq,    }).then((response) => {        const board = response.data.result.board;        return {            board: board        };    }).catch((error) => {        const errorDTO = error.response;        console.log(errorDTO)    })}/** * 갤러리 게시글을 수정합니다. * - 기존의 첨부파일을 삭제합니다. (deleteFileNames) * - 새로운 첨부파일을 업로드합니다. (addFiles) * * @param board 수정할 게시글 정보 * @returns {Promise<axios.AxiosResponse<any>>} */export const updateGalleryBoard = board => {    const data = new FormData();    console.log(board.addFiles)    // 추가 파일(addFiles) 배열 값 할당    if ((board.addFiles != null) && board.addFiles.length > -1) {        for (let i = 0; i < board.addFiles.length; i++) {            const file = board.addFiles[i]            data.append(`addFiles[${i}]`, file)        }    }    // 삭제 파일(deleteFileNames) 배열 값 할당    if ((board.deleteFileNames != null) && board.deleteFileNames.length > -1) {        for (let i = 0; i < board.deleteFileNames.length; i++) {            const fileName = board.deleteFileNames[i]            data.append(`deleteFileNames[${i}]`, fileName)        }    }    // store 에서 아이디 호출    const id = store.getters.id;    data.append('memberId', id)    data.append('subject', board.subject)    data.append('content', board.content)    data.append('categoryId', board.categoryId)    // 요청 구성 객체    const config = {        headers: {            'Content-Type': 'multipart/form-data'        }    };    return axios        .post(serverUrl + "api/board/gallery/" + board.seq, data, config)        .catch((err) => {            console.log(err)        })}/** * 갤러리 게시글을 삭제합니다. * * @param seq 삭제할 게시글 번호 * @returns {Promise<axios.AxiosResponse<any>>} */export const deleteGalleryBoard = (seq) => {    return axios        .delete(serverUrl + 'api/board/gallery/' + seq)        .catch((error) => {                const errorDTO = error.response;                console.log(errorDTO)            }        )}